---
import { Image } from "astro:assets";
import { Icon } from "astro-icon";
import type { NavItem } from "~/types";
import exantaLogo from "~/assets/exanta_logo_text.svg";
import logo from "~/assets/exanta_logo.svg";

const currentPath = Astro.url.pathname;

const navItems: Array<NavItem> = [
  { title: "About", url: "/about", children: [] },
  {
    title: "Services",
    url:
      currentPath == "/"
        ? "#services"
        : currentPath == "/blog"
          ? "../#services"
          : "../../#services",
    children: [],
  },
  // { title: "Tools", url: "", children: [{ title: "Political Insights", url: "/tools/political" }]},
  { title: "Tools", url: "/tools", children: [] },
  { title: "Blog", url: "/blog", children: [] },
  { title: "Contact", url: "/contact", children: [] },
];
---

<style>
  .dropdown-content {
    display: none;
    position: absolute;
    background-color: transparent;
    bottom: 100%;
    left: -80%;
    padding: 1rem;
    padding-bottom: 2.6rem;
    margin-top: 1.2rem;
    z-index: 1000;
    width: max-content;
  }
  .dropdown-content a {
    text-decoration: none;
    display: block;
  }
  .fixed-header .dropdown-content {
    top: 100%;
  }
  .top-0 .dropdown-content {
    top: 100%;
  }
  .dropdown-content a:hover {
    /* text-decoration: underline; */
    color: #60a5fa;
  }
  .open .dropdown-content,
  :hover .dropdown-content {
    display: block;
  }
</style>

<header
  id="page-header"
  class:list={[
    currentPath === "/" ? "bottom-0" : "top-0 bg-slate-950",
    "absolute z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 text-slate-200",
  ]}
>
  <a class="flex items-center gap-3 hover:!text-default" href="/">
    <h1 class="sr-only">exanta</h1>
    <Image src={exantaLogo} alt="exanta logo" width="150" />
  </a>
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map((item) => (
              <>
                {item.children.length !== 0 && (
                  <li class="relative">
                    <a id="tools-drop" class="text-sm cursor-pointer" href="#">
                      {item.title}
                      <Icon
                        name="tabler:chevron-down"
                        class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline"
                      />
                    </a>
                    <ul>
                      <div class="dropdown-content">
                        {item.children.map((item: any) => (
                          <li
                            class:list={[
                              currentPath.includes("/blog/")
                                ? "text-default text-sm"
                                : "text-sm",
                            ]}
                          >
                            <a href={item.url}>{item.title}</a>
                          </li>
                        ))}
                      </div>
                    </ul>
                  </li>
                )}
                {item.children.length === 0 && (
                  <li>
                    <a class="text-sm" href={item.url}>
                      {item.title}
                    </a>
                  </li>
                )}
              </>
            ))
          }
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn sm:hidden outline-0 outline-none focus:outline-none focus:outline-0 active:outline-none active:outline-0"
        aria-label="Navigation"
      >
        <Icon pack="mdi" name="menu" class="h-8" />
      </button>
    </div>
    <!-- mobile menu -->
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-slate-900 px-8 py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon pack="mdi" name="close" class="h-8" />
            </button>
          </header>
          <div class="flex justify-center">
            <Image src={logo} alt="exanta logo" class="h-16" />
          </div>
          <nav>
            <ul class="flex flex-col">
              {
                navItems.map((item) => (
                  <>
                    {item.children.length !== 0 && (
                      <li class="relative">
                        <a
                          class="block py-4 text-center text-xl text-slate-600 hover:text-slate-600 pointer-events-none"
                          href="#"
                        >
                          {item.title}
                        </a>
                        <ul>
                          <div class="text-center mx-auto pb-4">
                            {item.children.map((item: any) => (
                              <li>
                                <a class="text-sm" href={item.url}>
                                  {item.title}
                                </a>
                              </li>
                            ))}
                          </div>
                        </ul>
                      </li>
                    )}
                    {item.children.length === 0 && (
                      <li>
                        <a
                          class="block py-4 text-center text-xl"
                          href={item.url}
                        >
                          {item.title}
                        </a>
                      </li>
                    )}
                  </>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  document.addEventListener("astro:page-load", () => {
    const menuModalId = "menu-modal";

    const header = document.querySelector("#page-header") as HTMLElement;
    const page = document.documentElement;
    const menu = document.querySelector(`#${menuModalId} ul`);
    const openNavButton = document.querySelector("#open-nav-button");
    const closeNavButton = document.querySelector("#close-nav-button");

    invariant(header, "header should not be null");
    invariant(menu, "menu should not be null");
    invariant(openNavButton, "openNavButton should not be null");
    invariant(closeNavButton, "closeNavButton should not be null");

    const openMenu = () => {
      MicroModal.show(menuModalId, { disableScroll: true });
    };

    const closeMenu = () => {
      MicroModal.close(menuModalId);
    };

    openNavButton.addEventListener("click", openMenu);
    closeNavButton.addEventListener("click", closeMenu);

    document.addEventListener("scroll", () => {
      const d = page.clientHeight - page.scrollTop - header.offsetHeight;
      header.classList.toggle("fixed-header", d < 0);
    });

    menu.addEventListener("click", (event) => {
      if ((event.target as HTMLElement).tagName === "A") {
        closeMenu();
      }
    });

    // const servicesLink = document.getElementById('tools-drop');
    // const servicesDropdown = servicesLink.nextElementSibling;
    // const parentItem = servicesLink.parentElement;

    // servicesLink.addEventListener('click', (e) => {
    //   console.log("pressed button")
    //   parentItem.classList.toggle('open');
    // });

    // window.addEventListener('scroll', () => {
    //   if (parentItem.classList.contains('open')) {
    //     parentItem.classList.remove('open');
    //   }
    // });
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    @apply fixed bottom-auto top-0;
    @apply border-default bg-slate-900 text-slate-200;
  }
  .modal.is-open {
    @apply block;
  }
</style>
